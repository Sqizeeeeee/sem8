#include <stdio.h>
#include <string.h>

// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã (—á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ)
struct SystemRequirements {
    const char* system_name;      // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    int search_frequency;         // –ö–∞–∫ —á–∞—Å—Ç–æ –∏—â–µ–º (1-10)
    int update_frequency;         // –ö–∞–∫ —á–∞—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º (1-10)  
    int range_queries_needed;     // –ù—É–∂–Ω—ã –ª–∏ –ø–æ–∏—Å–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É (1-10)
    int memory_limited;           // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –ª–∏ –ø–∞–º—è—Ç—å (1-10)
    const char* storage_type;     // "memory" –∏–ª–∏ "disk"
};

// –ö–∞–Ω–¥–∏–¥–∞—Ç (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—É—é –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º)
struct StructureCandidate {
    const char* name;             // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    int search_speed;             // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ (1-10)
    int insert_speed;             // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ (1-10)
    int range_query_speed;        // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É (1-10)
    int memory_efficiency;        // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (1-10)
    const char* best_use_case;    // –î–ª—è —á–µ–≥–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
    const char* worst_use_case;   // –î–ª—è —á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
void evaluate_structure(struct SystemRequirements system, 
                       struct StructureCandidate candidate) {
    printf("–û—Ü–µ–Ω–∏–≤–∞–µ–º %s –¥–ª—è %s:\n", candidate.name, system.system_name);
    
    int total_score = 0;
    
    // –£–º–Ω–æ–∂–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    total_score += candidate.search_speed * system.search_frequency;
    total_score += candidate.insert_speed * system.update_frequency;
    total_score += candidate.range_query_speed * system.range_queries_needed;
    total_score += candidate.memory_efficiency * system.memory_limited;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã
    if (strcmp(system.storage_type, "disk") == 0) {
        if (strstr(candidate.name, "B+") != NULL) total_score += 20;
        if (strstr(candidate.name, "B-tree") != NULL) total_score += 15;
    } else {
        if (strstr(candidate.name, "AVL") != NULL) total_score += 10;
        if (strstr(candidate.name, "RBT") != NULL) total_score += 8;
    }
    
    printf("  –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: %d\n", total_score);
    printf("  –õ—É—á—à–µ –≤—Å–µ–≥–æ –¥–ª—è: %s\n", candidate.best_use_case);
    printf("  –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è: %s\n\n", candidate.worst_use_case);
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
void compare_for_system(struct SystemRequirements system, 
                       struct StructureCandidate candidates[], 
                       int count) {
    printf("=== –°–ò–°–¢–ï–ú–ê: %s ===\n", system.system_name);
    printf("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –ø–æ–∏—Å–∫=%d/10, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è=%d/10, –¥–∏–∞–ø–∞–∑–æ–Ω—ã=%d/10\n", 
           system.search_frequency, system.update_frequency, system.range_queries_needed);
    printf("–ü–∞–º—è—Ç—å: %s, –•—Ä–∞–Ω–∏–ª–∏—â–µ: %s\n\n", 
           system.memory_limited >= 7 ? "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞" : "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞",
           system.storage_type);
    
    int best_score = -1;
    const char* best_candidate = NULL;
    
    for (int i = 0; i < count; i++) {
        // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        int score = candidates[i].search_speed * system.search_frequency +
                   candidates[i].insert_speed * system.update_frequency +
                   candidates[i].range_query_speed * system.range_queries_needed +
                   candidates[i].memory_efficiency * system.memory_limited;
        
        // –ë–æ–Ω—É—Å—ã –∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (strcmp(system.storage_type, "disk") == 0) {
            if (strstr(candidates[i].name, "B+") != NULL) score += 20;
            if (strstr(candidates[i].name, "B-tree") != NULL) score += 15;
        }
        
        printf("%s: %d –±–∞–ª–ª–æ–≤\n", candidates[i].name, score);
        
        if (score > best_score) {
            best_score = score;
            best_candidate = candidates[i].name;
        }
    }
    
    printf("\nüèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: %s (%d –±–∞–ª–ª–æ–≤)\n", best_candidate, best_score);
    printf("=========================================\n\n");
}

int main() {
    printf("=== –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –ë–ê–¢–¢–õ: –í—ã–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ===\n\n");
    
    // –ù–∞—à–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã (—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö)
    struct StructureCandidate candidates[] = {
        // AVL Tree
        {
            "AVL Tree",
            10,    // –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
            6,     // –°—Ä–µ–¥–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ (–º–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏–π)
            4,     // –ü–ª–æ—Ö–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            7,     // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å
            "–°–∏—Å—Ç–µ–º—ã —Å —á–∞—Å—Ç—ã–º –ø–æ–∏—Å–∫–æ–º –∏ —Ä–µ–¥–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏",
            "–°–∏—Å—Ç–µ–º—ã —Å —á–∞—Å—Ç—ã–º–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏/—É–¥–∞–ª–µ–Ω–∏—è–º–∏"
        },
        
        // Red-Black Tree
        {
            "Red-Black Tree", 
            8,     // –•–æ—Ä–æ—à–∏–π –ø–æ–∏—Å–∫
            8,     // –•–æ—Ä–æ—à–∏–µ –≤—Å—Ç–∞–≤–∫–∏
            5,     // –°—Ä–µ–¥–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            7,     // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å
            "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)",
            "–°–∏—Å—Ç–µ–º—ã —Å —á–∞—Å—Ç—ã–º–∏ –ø–æ–∏—Å–∫–∞–º–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É"
        },
        
        // B-tree
        {
            "B-tree",
            7,     // –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫
            7,     // –°—Ä–µ–¥–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
            6,     // –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            8,     // –•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏
            "–î–∏—Å–∫–æ–≤—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "In-memory –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        },
        
        // B+ tree
        {
            "B+ tree",
            8,     // –•–æ—Ä–æ—à–∏–π –ø–æ–∏—Å–∫
            7,     // –°—Ä–µ–¥–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
            10,    // –û—Ç–ª–∏—á–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!
            9,     // –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏
            "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–∏—Å—Ç–µ–º—ã —Å range queries",
            "–ü—Ä–æ—Å—Ç—ã–µ in-memory –∫–µ—à–∏"
        },
        
        // 2-3 Tree
        {
            "2-3 Tree",
            7,     // –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫
            7,     // –°—Ä–µ–¥–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏
            4,     // –ü–ª–æ—Ö–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            6,     // –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏
            "–£—á–µ–±–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –ø—Ä–æ—Å—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã",
            "–í—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ production-—Å–∏—Å—Ç–µ–º—ã"
        }
    };
    
    // –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    struct SystemRequirements systems[] = {
        // 1. DNS –∫–µ—à-—Å–µ—Ä–≤–µ—Ä
        {
            "DNS –∫–µ—à-—Å–µ—Ä–≤–µ—Ä",
            9,  // –û—á–µ–Ω—å —á–∞—Å—Ç—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–∞–º
            2,  // –†–µ–¥–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ TTL –∏—Å—Ç–µ–∫–∞–µ—Ç)
            1,  // –î–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ—á—Ç–∏ –Ω–µ –Ω—É–∂–Ω—ã
            8,  // –ü–∞–º—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ (–∫–µ—à –≤ RAM)
            "memory"
        },
        
        // 2. –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–æ–≤
        {
            "–•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏", 
            6,  // –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫
            8,  // –ß–∞—Å—Ç—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤
            9,  // –û—á–µ–Ω—å —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã "–ª–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"
            3,  // –ü–∞–º—è—Ç—å –Ω–µ —Å–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
            "disk"
        },
        
        // 3. In-memory –∫–µ—à —Å–µ—Å—Å–∏–π
        {
            "In-memory –∫–µ—à —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            8,  // –ß–∞—Å—Ç—ã–π –ø–æ–∏—Å–∫ —Å–µ—Å—Å–∏–π
            7,  // –ß–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏, logout)
            2,  // –î–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–µ–¥–∫–æ –Ω—É–∂–Ω—ã
            9,  // –ü–∞–º—è—Ç—å —Å–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
            "memory"
        },
        
        // 4. –ì–µ–æ-–∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞—Ä—Ç
        {
            "–ì–µ–æ-–∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            7,  // –°—Ä–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫
            5,  // –°—Ä–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            8,  // –ß–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã "–æ–±—ä–µ–∫—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏"
            5,  // –ü–∞–º—è—Ç—å —Å—Ä–µ–¥–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
            "memory"
        }
    };
    
    int num_candidates = sizeof(candidates) / sizeof(candidates[0]);
    int num_systems = sizeof(systems) / sizeof(systems[0]);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã
    for (int i = 0; i < num_systems; i++) {
        compare_for_system(systems[i], candidates, num_candidates);
    }
    
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É
    printf("=== –°–û–ó–î–ê–ô–¢–ï –°–í–û–Æ –°–ò–°–¢–ï–ú–£ ===\n");
    
    struct SystemRequirements custom_system;
    custom_system.system_name = "–ú–æ—è –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞";
    
    printf("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:\n");
    
    printf("–ö–∞–∫ —á–∞—Å—Ç–æ –±—É–¥–µ—Ç –ø–æ–∏—Å–∫? (1-10, –≥–¥–µ 10=–æ—á–µ–Ω—å —á–∞—Å—Ç–æ): ");
    scanf("%d", &custom_system.search_frequency);
    
    printf("–ö–∞–∫ —á–∞—Å—Ç–æ –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è? (1-10): ");
    scanf("%d", &custom_system.update_frequency);
    
    printf("–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω—ã –ø–æ–∏—Å–∫–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É? (1-10): ");
    scanf("%d", &custom_system.range_queries_needed);
    
    printf("–ü–∞–º—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞? (1-10, –≥–¥–µ 10=—Å–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞): ");
    scanf("%d", &custom_system.memory_limited);
    
    printf("–¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (1=memory, 2=disk): ");
    int storage_choice;
    scanf("%d", &storage_choice);
    custom_system.storage_type = (storage_choice == 2) ? "disk" : "memory";
   printf("\n");
    compare_for_system(custom_system, candidates, num_candidates);
   printf("\n=== –û–ë–™–Ø–°–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===\n");
    printf("‚Ä¢ AVL Tree: –∏–¥–µ–∞–ª–µ–Ω –∫–æ–≥–¥–∞ –ø–æ–∏—Å–∫ >> –≤—Å—Ç–∞–≤–æ–∫\n");
    printf("‚Ä¢ Red-Black Tree: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫\n");
    printf("‚Ä¢ B-tree: –¥–ª—è –¥–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç I/O –æ–ø–µ—Ä–∞—Ü–∏–∏\n");
    printf("‚Ä¢ B+ tree: –∫–æ—Ä–æ–ª—å –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏ range queries\n");
    printf("‚Ä¢ 2-3 Tree: —É—á–µ–±–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ\n");
    return 0;
}
